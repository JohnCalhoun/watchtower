{"Conditions" : {
    "CreateProdResources" : {"Fn::Equals" : [{"Ref" : "EnvType"}, "prod"]},
    "CreateDevResources" : {"Fn::Equals" : [{"Ref" : "EnvType"}, "dev"]},
    "CreateTestResources" : {"Fn::Equals" : [{"Ref" : "EnvType"}, "test"]}
},

"AWSTemplateFormatVersion" : "2010-09-09",
"Description" : "Api interface for Watchtower",

"Mappings":{

},

"Outputs":{
    "DomainName":{
        "Description":"DomainName endpoint for the api",
        "Value":{ "Fn::Join" : ["",[
            {"Ref":"Api"},
            ".execute-api.",
            {"Ref":"AWS::Region"},
            ".amazonaws.com"
        ]]},
        "Export":{
            "Name":{"Fn::Join":["-",[
                {"Ref":"AWS::StackName"},
                "API-URL"
            ]]}
        }
    }
},

"Parameters":{
    "EnvType" : {
        "Description" : "Environment type.",
        "Default" : "test",
        "Type" : "String",
        "AllowedValues" : ["prod", "test","dev"],
        "ConstraintDescription" : "must specify prod,test,or dev"
    },    
    "UserStackName":{
        "Description" : "StackName of the Cognito user pools",
        "Type" : "String"
    },
    "ArtifactsBucket":{
        "Description" : "Bucket That contains the lambda zip files",
        "Type" : "String"
    },
    "DatabaseStackName" : {
        "Description" : "Database Stack Name",
        "Type" : "String"
    }
},




"Resources":{ 
"Api":{
    "Type" : "AWS::ApiGateway::RestApi",
    "Properties" : {
        "Name" : {"Ref":"AWS::StackName"}
    }
},
"ApiDeployment":{
    "Type" : "AWS::ApiGateway::Deployment",
    "Properties" : {
        "RestApiId" : {"Ref":"Api"}
    },
    "DependsOn":[
        "ReadMethod",
        "WriteMethod",
        "HealthCheckMethod"
    ]
},
"ApiStage":{
    "Type" : "AWS::ApiGateway::Stage",
    "Properties" : {
        "DeploymentId" : {"Ref":"ApiDeployment"},
        "RestApiId" : {"Ref":"Api"},
        "StageName" : "production",
        "Variables":{
            "server":{"Fn::ImportValue":{"Fn::Sub":"${DatabaseStackName}-DBEndpoint"}}
        }
    }
},
"WriteResource":{
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
        "ParentId" :{ "Fn::GetAtt": ["Api", "RootResourceId"] } ,
        "PathPart" : "write",
        "RestApiId" : {"Ref":"Api"}
    }
},
"WriteScriptResource":{
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
        "ParentId" :{ "Ref":"WriteResource"} ,
        "PathPart" : "{script}",
        "RestApiId" : {"Ref":"Api"}
    }
},
"ReadResource":{
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
        "ParentId" :{ "Fn::GetAtt": ["Api", "RootResourceId"] } ,
        "PathPart" : "read",
        "RestApiId" : {"Ref":"Api"}
    }
},
"ReadScriptResource":{
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
        "ParentId" :{ "Ref":"ReadResource"} ,
        "PathPart" : "{script}",
        "RestApiId" : {"Ref":"Api"}
    }
},
"HealthCheckResource":{
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
        "ParentId" :{ "Fn::GetAtt": ["Api", "RootResourceId"] } ,
        "PathPart" : "healthcheck",
        "RestApiId" : {"Ref":"Api"}
    }
},
"IAMAuthorizor":{
    "Type" : "AWS::ApiGateway::Authorizer",
    "Properties" : {
        "AuthorizerResultTtlInSeconds" : "0",
        "IdentitySource" : "method.request.header.Authorization",
        "Name" : "Admin",
        "ProviderARNs" : [{"Fn::Join":["",[
            "arn:aws:cognito-idp:",
            {"Ref":"AWS::Region"},
            ":",
            {"Ref":"AWS::AccountId"},           
            ":userpool/",
            {"Fn::ImportValue":{"Fn::Sub":"${UserStackName}-AdminPoolId"}}
        ]]}],
        "RestApiId" : {"Ref":"Api"},
        "Type" : "COGNITO_USER_POOLS"
    }
},
"ScriptModel":{
    "Type" : "AWS::ApiGateway::Model",
    "Properties" : {
        "ContentType" : "application/json",
        "Name" : "ScriptSubmit",
        "RestApiId" : {"Ref":"Api"},
        "Schema" : {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "title": "Script",
            "type": "object",
            "properties": {
                "script":{
                    "type":"string"
                },
                "bindings":{
                    "type":"object"
                }
            }
        }
    }
},
"ResponseModel":{
    "Type" : "AWS::ApiGateway::Model",
    "Properties" : {
        "ContentType" : "application/json",
        "Name" : "response",
        "RestApiId" : {"Ref":"Api"},
        "Schema" : {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "title": "Script",
            "type": "object",
            "properties": {
                "output":{
                    "type":"string"
                }
            }
        }
    }
},
"ReadMethod":{
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
        "AuthorizationType" : "COGNITO_USER_POOLS",
        "AuthorizerId" : {"Ref":"IAMAuthorizor"},
        "HttpMethod" : "POST",
        "Integration" : {
            "Credentials" : {"Fn::GetAtt":["ApiGatewayRole","Arn"]},
            "IntegrationHttpMethod" : "POST",
            "PassthroughBehavior":"NEVER", 
            "RequestTemplates":{
                "application/json":{"Fn::Join":["",[
                    "{",
                        "\"script\": \"method.request.path.script\",", 
                        "\"bindings\": \"method.request.body\",",
                    "}"
                    ]]}
            },
            "IntegrationResponses" : [
                {
                    "ResponseTemplates": {
                        "application/json": {"Fn::Join":["",[
                            "{",
                                "\"output\": \"$input.json($.result.data)\"", 
                            "}"
                        ]]}
                     },
                    "StatusCode" : "200"
                },
                {
                    "SelectionPattern": "^ERROR.*",
                    "ResponseTemplates": {
                        "application/json":{"Fn::Join":["",[
                            "{",
                                "\"message\": \"$input.json($.status.message)\"", 
                            "}"
                        ]]}
                     },
                    "StatusCode": 404
                }
            ],
            "Type" : "AWS",
            "Uri": {
                "Fn::Join": ["",[
                    "arn:aws:apigateway:",
                    {"Ref": "AWS::Region"},
                    ":lambda:path/2015-03-31/functions/",
                    {"Fn::ImportValue":{"Fn::Sub":"${DatabaseStackName}-ReadLambda"}},
                    "/invocations"
                  ]
                ]
              }
        },
        "MethodResponses" : [
            {
                "ResponseModels":{
                    "application/json":{"Ref":"ResponseModel"}
                },
                "StatusCode" : "200"
            },
            {
                "ResponseModels":{
                    "application/json":"Empty"
                },
                "StatusCode" : "404"
            }
        ],
        "RequestModels":{
            "application/json":{"Ref":"ScriptModel"}
        },
        "RequestParameters" : {},
        "ResourceId" : {"Ref":"ReadScriptResource"},
        "RestApiId" : {"Ref":"Api"}
    }
},
"WriteMethod":{
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
        "AuthorizationType" : "COGNITO_USER_POOLS",
        "AuthorizerId" : {"Ref":"IAMAuthorizor"},
        "HttpMethod" : "POST",
        "Integration" : {
            "Credentials" : {"Fn::GetAtt":["ApiGatewayRole","Arn"]},
            "IntegrationHttpMethod" : "POST",
            "PassthroughBehavior":"NEVER", 
            "RequestTemplates":{
                "application/json":{"Fn::Join":["",[
                    "{",
                        "\"script\": \"method.request.path.script\",", 
                        "\"bindings\": \"method.request.body\",",
                    "}"
                    ]]}
            },
            "IntegrationResponses" : [
                {
                    "ResponseTemplates": {
                        "application/json": {"Fn::Join":["",[
                            "{",
                                "\"output\": \"$input.json($.result.data)\"", 
                            "}"
                        ]]}
                     },
                    "StatusCode" : "200"
                },
                {
                    "SelectionPattern": "^ERROR.*",
                    "ResponseTemplates": {
                        "application/json":{"Fn::Join":["",[
                            "{",
                                "\"message\": \"$input.json($.status.message)\"", 
                            "}"
                        ]]}
                     },
                    "StatusCode": 404
                }
            ],
            "Type" : "AWS",
            "Uri": {
                "Fn::Join": ["",[
                    "arn:aws:apigateway:",
                    {"Ref": "AWS::Region"},
                    ":lambda:path/2015-03-31/functions/",
                    {"Fn::ImportValue":{"Fn::Sub":"${DatabaseStackName}-WriteLambda"}},
                    "/invocations"
                  ]
                ]
              }
        },
        "MethodResponses" : [
            {
                "ResponseModels":{
                    "application/json":{"Ref":"ResponseModel"}
                },
                "StatusCode" : "200"
            },
            {
                "ResponseModels":{
                    "application/json":"Empty"
                },
                "StatusCode" : "404"
            }
        ],
        "RequestModels":{
            "application/json":{"Ref":"ScriptModel"}
        },
        "RequestParameters" : {},
        "ResourceId" : {"Ref":"WriteScriptResource"},
        "RestApiId" : {"Ref":"Api"}
    }
},
"HealthCheckMethod":{
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
        "AuthorizationType" : "NONE",
        "HttpMethod" : "GET",
        "Integration" : {
            "Credentials" : {"Fn::GetAtt":["ApiGatewayRole","Arn"]},
            "IntegrationHttpMethod" : "POST",
            "PassthroughBehavior":"NEVER", 
            "RequestTemplates":{
                "application/json":{"Fn::Join":["",[
                    "{",
                        "\"script\": \"healthcheck\",", 
                        "\"bindings\": {},",
                    "}"
                ]]}
            },
            "IntegrationResponses" : [
                {
                    "ResponseTemplates": {
                        "application/json": "Empty"
                     },
                    "StatusCode" : "200"
                },
                {
                    "SelectionPattern": "^ERROR.*",
                    "ResponseTemplates": {
                        "application/json": "Empty"
                    },
                    "StatusCode": 404
                }
            ],
            "Type" : "AWS",
            "Uri": {
                "Fn::Join": ["",[
                    "arn:aws:apigateway:",
                    {"Ref": "AWS::Region"},
                    ":lambda:path/2015-03-31/functions/",
                    {"Fn::ImportValue":{"Fn::Sub":"${DatabaseStackName}-ReadLambda"}},
                    "/invocations"
                  ]
                ]
              }
        },
        "MethodResponses" : [
            {
                "ResponseModels":{
                    "application/json":"Empty"
                },
                "StatusCode" : "200"
            },
            {
                "ResponseModels":{
                    "application/json":"Empty"
                },
                "StatusCode" : "404"
            }
        ],
        "RequestParameters" : {},
        "ResourceId" : {"Ref":"HealthCheckResource"},
        "RestApiId" : {"Ref":"Api"}
    }
}


,
"Apihealthcheck":{
    "Type" : "AWS::Route53::HealthCheck",
    "Properties" : {
        "HealthCheckConfig" : {
            "FailureThreshold" : 3,
            "FullyQualifiedDomainName" :{ "Fn::Join" : ["",[
                {"Ref":"Api"},
                ".execute-api.",
                {"Ref":"AWS::Region"},
                ".amazonaws.com"
            ]]}, 
            "Port" : 443,
            "ResourcePath" : {"Fn::Join":["",[
                "/heathcheck"
            ]]},
            "Type" : "HTTPS"
        }
    }
},
"Apihealthalarm":{
    "Type" : "AWS::CloudWatch::Alarm",
    "Properties" : {
        "ComparisonOperator" : "LessThanThreshold",
        "Period" : "240",
        "EvaluationPeriods" : "2",
        "Namespace" : "AWS/Route53",
        "MetricName" : "HealthCheckPercentageHealthy",
        "Dimensions" : [ 
            {"Name":"HealthCheckId",
            "Value":{"Ref":"Apihealthcheck"}
            }
        ],
        "Unit":"Percent", 
        "Statistic" : "Minimum",
        "Threshold" : "100"
    }
}
,
"ApiGatewayRole":{
    "Type": "AWS::IAM::Role",
    "Properties": {
         "AssumeRolePolicyDocument": { 
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                    "Service": [ "apigateway.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
            }]
        },
        "Path": "/",
        "ManagedPolicyArns":[],
        "Policies": [
            {
                "PolicyName":"CreateCognitoPool",
                "PolicyDocument":{
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "Stmt1482095556000",
                            "Effect": "Allow",
                            "Action": [
                                "lambda:invokeFunction"
                            ],
                            "Resource": [
                                {"Fn::ImportValue":{"Fn::Sub":"${DatabaseStackName}-ReadLambda"}},
                                {"Fn::ImportValue":{"Fn::Sub":"${DatabaseStackName}-WriteLambda"}}
                            ]
                        }
                    ]
                }
            }

        
        
        ]
    }
}
}}