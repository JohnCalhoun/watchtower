/*
    Titan DB gremlin server 
        Gremlin Launch Config
        AutoScaling Group
        ELB
*/
"GremlinServerLC":{
    "Type":"AWS::AutoScaling::LaunchConfiguration",
    "Properties":{
        "EbsOptimized" : false,
        "KeyName":{ "Fn::FindInMap": [ "RegionKeys", { "Ref": "AWS::Region" }, "Name" ] },
        "ImageId" :  { "Fn::FindInMap": [ "RegionAmis", { "Ref": "AWS::Region" }, "ID" ] },
        "InstanceType" : { "Fn::FindInMap": [ "InstanceType", "Instance", "ID"] },
        "SecurityGroups" : [{"Ref":"GremlinServerSG"}],
        "IamInstanceProfile":{"Ref":"GremlinServerProfile"},
        "UserData" : {"Fn::Base64":
            {"Fn::Join":["\n",[
                "#! /bin/bash",
                "exec >/root/user-data.log 2>&1",
                "yum install git -y",
                "yum update -y",
                "cd /root",
                {"Fn::Join":["",[
                    "aws s3 cp s3://",
                    {"Fn::FindInMap":["Buckets","assets","name"]},
                    "/disclosure/server ",
                    " . ",
                    "--recursive"
                ]]},
                "chmod +x ./*.sh",
                {"Fn::Join":["",[
                    "./titandb.sh ",
                    {"Ref":"AWS::StackName"},
                    " ",
                    {"Fn::Join":["-",[
                        {"Ref":"AWS::StackName"},
                        "elasticsearch"
                    ]]}
                ]]},
                {"Fn::Join":["",[
                    "aws s3 cp /root/titandb.log ",
                    "s3://",
                    {"Fn::FindInMap":["Buckets","log","name"]},
                    "/disclosure/",
                    {"Ref":"AWS::StackName"},
                    ".log"
                ]]}
            ]]}
        } 
    },
    "DependsOn":"ElasticSearch"
},
"AutoScalingGroup":{
    "Type" : "AWS::AutoScaling::AutoScalingGroup",
    "Properties" : {
        "HealthCheckType" : "ELB",
        "LaunchConfigurationName" : {"Ref":"GremlinServerLC"},
        "LoadBalancerNames" : [{"Ref":"ELB"}],
        "HealthCheckGracePeriod":"360",
        "MaxSize" : "1",
        "DesiredCapacity" : "1",
        "MinSize" : "1",
        "VPCZoneIdentifier" : [ {"Ref":"subnet1"},{"Ref":"subnet2"}]
    }
},
"ELB":{
    "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
    "Properties": {
        "HealthCheck" : {
            "Interval" : 5,
            "Target" : "HTTP:8182/?gremlin=100-1",
            "Timeout" : 2,
            "UnhealthyThreshold" : 2,
            "HealthyThreshold" : 2
        },
        "Scheme":"internal",
        "Listeners" : [ 
            {
                "InstancePort" : "8182",
                "InstanceProtocol" : "HTTP",
                "LoadBalancerPort" : "80",
                "Protocol" : "HTTP"
            },
            {
                "InstancePort" : "8182",
                "InstanceProtocol" : "HTTP",
                "LoadBalancerPort" : "443",
                "Protocol" : "HTTPS",
                "SSLCertificateId":{"Fn::FindInMap":["Cert","ACM","ARN"]}
            }
        ],
        "Subnets" : [{"Ref":"subnet1"},{"Ref":"subnet2"}],
        "SecurityGroups":[{"Ref":"ELBSG"}]
    },
    "DependsOn":"VPCattach"
}

